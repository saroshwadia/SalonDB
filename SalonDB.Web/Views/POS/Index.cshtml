@model SalonDB.Web.Models.POSViewModel
@{ decimal TaxPercentage = 5;}
@{
    ViewBag.Title = "Appointment";
}

@using (Html.BeginForm("Save", "POS", new { sPModelCol = @Model.ServiceProductViewModelCol, enctype = "multipart/form-data" }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{

    @Html.HiddenFor(m => m.TargetAction)
    @Html.HiddenFor(m => m.TargetController)
    @Html.HiddenFor(m => m.WalkInCustomerID)
    @Html.HiddenFor(m => m.TransactionID)
    @Html.HiddenFor(m => m.FromInvoice)

    @*<h2>POS from @Model.TargetController</h2>*@
    <br />

    <div class="panel panel-success col-md-3">

        <div class="panel-body">

            <div class="panel panel-primary col-md-12">
                <div class="panel-heading">
                    <h3 class="panel-title">Appointment</h3>
                </div>
                <div class="panel-body">
                    @Html.EJ().DropDownList("selectAppointment").Datasource((IEnumerable<SalonDB.Web.Models.AppointmentViewModel>)Model.AppointmentCol).DropDownListFields(df => df.ID("AppointmentID").Text("Subject").Value("AppointmentID")).Width("225px").WatermarkText("Select Appointment").ClientSideEvents(e => e.Change("onAppointmentActiveValueChange")).EnableIncrementalSearch(true).EnableFilterSearch(true).EnablePopupResize(true).PopupHeight("250px")
                </div>
            </div>

            <div class="panel panel-primary col-md-12">
                <div class="panel-heading">
                    <h3 class="panel-title">Customer</h3>
                </div>
                <div class="panel-body">
                    @Html.EJ().DropDownList("selectCustomer").Datasource((IEnumerable<SalonDB.Web.Models.CustomerViewModel>)Model.CustomerCol).DropDownListFields(df => df.ID("CustomerID").Text("Name").Value("CustomerID")).Width("225px").WatermarkText("Select Customer").ClientSideEvents(e => e.Change("onCustomerActiveValueChange")).EnableIncrementalSearch(true).EnableFilterSearch(true).EnablePopupResize(true).PopupHeight("250px")
                    <button id="btnAddCustomer" type="button" class="btn btn-warning" onclick="addCustomer()">+</button>
                </div>
            </div>

            <div class="panel panel-primary col-md-12">
                <div class="panel-heading">
                    <h3 class="panel-title">Staff</h3>
                </div>
                <div class="panel-body">
                    @Html.EJ().DropDownList("selectStaff").Datasource((IEnumerable<SalonDB.Web.Models.StaffViewModel>)Model.StaffCol).DropDownListFields(df => df.ID("StaffID").Text("Name").Value("StaffID")).Width("225px").WatermarkText("Select Staff").ClientSideEvents(e => e.Change("onStaffActiveValueChange")).EnableIncrementalSearch(true).EnableFilterSearch(true).EnablePopupResize(true).PopupHeight("250px")
                </div>
            </div>

        </div>

    </div>

    <div class="panel panel-success col-md-9">

        <div class="panel panel-primary col-md-6">
            <div class="panel-heading">
                <h3 class="panel-title">Add Services</h3>
            </div>
            <div class="panel-body">
                <div class="col-md-9">
                    @Html.EJ().DropDownList("selectService").Datasource((IEnumerable<SalonDB.Web.Models.ServiceViewModel>)Model.ServiceCol).DropDownListFields(df => df.ID("ServiceID").Text("Name").Value("ServiceID")).Width("350px").WatermarkText("Select Service").ClientSideEvents(e => e.PopupHide("onServiceActiveValueChange")).Enabled(false).EnableIncrementalSearch(true).EnableFilterSearch(true).FilterType(SearchFilterType.Contains)
                </div>
                <div class="col-md-3">
                    <button style="display:none" id="serviceButton" type="button" class="btn btn-primary" onclick="onaddserviceclick()">+</button>
                </div>
            </div>
        </div>

        <div class="panel panel-primary col-md-6">
            <div class="panel-heading">
                <h3 class="panel-title">Add Products</h3>
            </div>
            <div class="panel-body">
                <div class="col-md-9">
                    @Html.EJ().DropDownList("selectProduct").Datasource((IEnumerable<SalonDB.Web.Models.ProductViewModel>)Model.ProductCol).DropDownListFields(df => df.ID("ProductID").Text("Name").Value("ProductID")).Width("350px").WatermarkText("Select Product").ClientSideEvents(e => e.PopupHide("onProductActiveValueChange")).Enabled(false).EnableIncrementalSearch(true).EnableFilterSearch(true).FilterType(SearchFilterType.Contains)
                </div>
                <div class="col-md-3">
                    <button style="display:none" id="productButton" type="button" class="btn btn-primary" onclick="onaddproductclick()">+</button>
                </div>
            </div>
        </div>

        <div class="panel panel-primary col-md-12">

            <div class="panel-heading">
                <h3 class="panel-title">Items</h3>
            </div>

            <div class="panel-body">

                <div class="col-md-12 col-md-offset-0">
                    @(Html.EJ().Grid<SalonDB.Web.Models.ServiceProductViewModel>("gridServiceProduct")
                .Datasource((IEnumerable<SalonDB.Web.Models.ServiceProductViewModel>)Model.ServiceProductViewModelCol)
                //.IsResponsive(true)
                //.EnableResponsiveRow(false)
                //.AllowPaging()
                //.PageSettings(page => page.PageSize(8))
                .SelectionType(SelectionType.Multiple)
                .AllowResizeToFit(true)
                .AllowResizing()
                .EditSettings(edit =>
                {
                    //edit.AllowEditing(); edit.AllowDeleting(); edit.AllowAdding(); edit.EditMode(EditMode.Dialog).TitleColumn("Name");
                    edit.AllowEditing(); edit.AllowDeleting(); edit.EditMode(EditMode.Dialog).TitleColumn("Name");
                })
                .EnableAltRow(true)
                .EnableRowHover(true)
                .EnableAltRow(true)
                .AllowScrolling()
                .ScrollSettings(col =>
                {
                    col.Width("auto").Height("150");
                })
                .ContextMenuSettings(contextMenu =>
                {
                    contextMenu.EnableContextMenu();
                })
                //.ShowSummary()
                //.SummaryRow(row =>
                //{
                //    row.Title("Sum").SummaryColumns(col => { col.SummaryType(SummaryType.Custom).CustomSummaryValue("refreshSummaryTotals").Format("{0:C2}").DisplayColumn("Total").DataMember("Total").Add(); }).Add();
                //})
                .ClientSideEvents(eve => eve.Create("create").ActionComplete("actionComplete").ActionBegin("actionBegin"))
                //.ClientSideEvents(eve => eve.Create("create").QueryCellInfo("queryCellInfo"))
                .Columns(col =>
                {
                    col.Field(oRow => oRow.ID).HeaderText("ID").TextAlign(TextAlign.Left).Width("5%").IsPrimaryKey(true).AllowEditing(false).Visible(false).Type("guid").Add();
                    col.Field(oRow => oRow.Name).HeaderText("Name").TextAlign(TextAlign.Left).Width("28%").AllowEditing(false).Type("string").Add();
                    col.Field(oRow => oRow.Price).HeaderText("Price").TextAlign(TextAlign.Right).Width("5%").Format("{0:C2}").Type("number").Add();
                    col.Field(oRow => oRow.Quantity).HeaderText("Quantity").TextAlign(TextAlign.Right).Width("7%").Format("{0:N0}").Type("number").Add();
                    col.Field(oRow => oRow.DiscountPercentage).HeaderText("Discount%").TextAlign(TextAlign.Right).Width("7%").Format("{0:N2}").Type("number").Add();
                    col.Field(oRow => oRow.Total).HeaderText("Total").TextAlign(TextAlign.Right).Width("7%").Format("{0:C2}").AllowEditing(false).Visible(true).Type("number").Add();
                    //col.HeaderText("Total").Template("<span>{{:(Price * Quantity) - (DiscountPercentage / 100 * (Price * Quantity)) }}</span>").TextAlign(TextAlign.Right).Width("7%").Format("{0:C2}").AllowEditing(false).Type("number").Add();
                    col.HeaderText("Delete").Template("<a href='#' id='mydeletelink' onclick='ondeleteclick(); return false;'>Delete</a>").Add();
                    //col.HeaderText("Edit").Template("<a href='#' id='myeditlink' onclick='oneditclick();'>Edit</a>").Add();
                }))


                </div>

                <div class="col-md-4 col-md-offset-8">

                    <table class="totalcalcs col-md-offset-0">
                        <tbody>
                            <tr>
                                <td>
                                    <label>Total</label>
                                </td>
                                <td>
                                    @Html.EJ().NumericTextbox("totalAmount").ShowRoundedCorner(true).Enabled(false).Value(0).DecimalPlaces(2)
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    @Html.Label("Tax " + TaxPercentage + " %")
                                </td>
                                <td>
                                    @Html.EJ().NumericTextbox("taxAmount").ShowRoundedCorner(true).Enabled(false).Value(0).DecimalPlaces(2)
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    <label>Discount %</label>
                                </td>
                                <td>
                                    @Html.EJ().NumericTextbox("totalDiscountPercentage").ShowRoundedCorner(true).Value(0).DecimalPlaces(2).ClientSideEvents(e => e.Change("onTotalDiscountPercentageChange"))
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    <label>Tip Amount</label>
                                </td>
                                <td>
                                    @Html.EJ().NumericTextbox("tipAmount").ShowRoundedCorner(true).Value(0).DecimalPlaces(2).ClientSideEvents(e => e.Change("onTipAmountChange"))
                                </td>
                            </tr>

                            <tr>
                                <td>
                                    <label>Grand Total</label>
                                </td>
                                <td>
                                    @Html.EJ().NumericTextbox("grandTotal").ShowRoundedCorner(true).Enabled(false).Value(0).DecimalPlaces(2)
                                </td>
                            </tr>

                        </tbody>
                    </table>

                </div>

                <div class="col-md-12">
                    <button id="newButton" type="button" class="btn btn-info" onclick="onnewclick()">New</button>
                    <button id="printButton" type="button" class="btn btn-info" onclick="onprintclick()">Print</button>
                    <button id="cancelButton" type="button" class="btn btn-warning" onclick="oncancelclick()">Cancel</button>
                    <button id="checkoutButton" type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">CheckOut</button>
                </div>

                <!-- Modal -->
                <div class="modal fade" id="myModal" role="dialog">
                    <div class="modal-dialog">

                        <!-- Modal content-->
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal">&times;</button>
                                <h4 class="modal-title">Payment</h4>
                            </div>
                            <div class="modal-body">
                                <p>Select a payment method or click [x] to Cancel.</p>
                            </div>
                            <div class="modal-footer">

                                <button type="button" class="btn btn-warning" onclick="onsavecashclick()" data-dismiss="modal">Cash</button>
                                <button type="button" class="btn btn-warning" onclick="onsavedebitcardclick()" data-dismiss="modal">DebitCard</button>
                                <button type="button" class="btn btn-info" onclick="onsavevisaclick()" data-dismiss="modal">Visa</button>
                                <button type="button" class="btn btn-primary" onclick="onsavemastercardclick()" data-dismiss="modal">MasterCard</button>

                                <div class="btn-group">

                                    <button type="button" class="btn btn-default" onclick="onsaveotherclick()" data-dismiss="modal">Other</button>
                                    <button type="button" class="btn btn-default dropdown-toggle" onselect ="onsaveotherclick()" data-toggle="dropdown">
                                        <span class="caret"></span>
                                        <span class="sr-only">Toggle Dropdown</span>
                                    </button>

                                    @*@Html.EJ().SplitButton("dropdownbtn").Text("login").ShowRoundedCorner(true).Size(ButtonSize.Medium).ContentType(ContentType.TextOnly).TargetID("menu1").ButtonMode(ButtonMode.Dropdown)*@

                                    <ul id="menu1" class="dropdown-menu" role="menu">
                                        <!-- class dropdown-menu -->

                                        @foreach (var item in Model.PaymentTypeCol.Where(e => e.Other).OrderBy(e => e.Sequence))
                                        {
                                            <li><a href="#">@item.Name</a></li>
                                        }

                                    </ul>
                                </div>

                            </div>
                        </div>

                    </div>
                </div>

            </div>
        </div>

    </div>

    <div class="row" id="addCustomerDialog" style="display:none">
        <br />
        <div class="col-md-3">
            Name:
        </div>
        <div class="col-md-9">
            <input type="text" class="form-control" id="customerName" placeholder="Enter Name" value="" onkeyup="refreshAddCustomerControls()">
            <br />
        </div>
        <div class="col-md-3">
            Phone:
        </div>

        <div class="col-md-9">
            <input type="text" class="form-control" id="customerPhone" placeholder="Enter Phone" value="" style="width:100%">
            <br />
        </div>

        <div class="col-md-3">
            Email:
        </div>
        <div class="col-md-9">
            <input type="text" class="form-control" id="customerEmail" placeholder="Enter Email" value="">
            <br />
        </div>

        <div class="col-md-12">
            <br />
            <br />
            <button id="btnCancelCustomer" type="button" class="btn btn-warning" onclick="cancelCustomer()" style="float:right;margin-right:20px;margin-bottom:10px;">Cancel</button>
            <button id="btnSaveCustomer" type="button" class="btn btn-primary" onclick="saveCustomer()" style="float:right;margin-right:20px;margin-bottom:10px;">OK</button>
        </div>

    </div>

}

<script type="text/javascript">
    var selectedAppointmentValue;
    var selectedCustomerValue;
    var selectedServiceValue;
    var selectedServiceText;
    var selectedProductValue;
    var selectedProductText;
    var selectedStaffValue;
    var selectedStaffText;
    var selectedPaymentTypeValue;
    var selectedPaymentTypeText;
    var taxPercentage = 5;
    var totalAmount = 0;
    var taxAmount = 0;
    var totalDiscountPercentage = 0;
    var totalDiscountAmount = 0;
    var grandTotal = 0;
    var decimalPlaces = 2;
    var blankAppointmentDD = false;
    var appointmentID = null;
    var appointmentList = null;
    var transactionID = null;
    var transactionList = null;
    var serviceList = null;
    var productList = null;
    var serviceProductList = null;
    var paymentTypeList = null;
    var staffList = null;
    var staffID = null;
    var customerID = null;
    var walkInCustomerID = null;
    var viewLoading = true;
    var useAppointment = false;
    var dataSaved = false;
    var addOnDropdownChange = true;
    var transactionID = "";
    var fromInvoice = false;

    //$(window).on("load", function () {
    //    //debugger;
    //    //refreshSummaryTotals();
    //    //alert("window loaded");
    //});



    $(document).ready(function () {
        //debugger;
        //refreshControls();
        //refreshSummaryTotals();
        //alert("document ready");
    });

    $.when($.ready).then(function () {
        //alert("when ready");
        //debugger;
        appointmentID = @Html.Raw(Json.Encode(Model.AppointmentIDString));
        appointmentList = @Html.Raw(Json.Encode(Model.AppointmentCol));
        transactionID = @Html.Raw(Json.Encode(Model.TransactionIDString));
        transactionList = @Html.Raw(Json.Encode(Model.TransactionCol));
        serviceList = @Html.Raw(Json.Encode(Model.ServiceCol));
        productList = @Html.Raw(Json.Encode(Model.ProductCol));
        staffList = @Html.Raw(Json.Encode(Model.StaffCol));
        serviceProductList = @Html.Raw(Json.Encode(Model.ServiceProductViewModelCol));
        paymentTypeList = @Html.Raw(Json.Encode(Model.PaymentTypeCol));
        staffID = @Html.Raw(Json.Encode(Model.StaffIDString));
        customerID = @Html.Raw(Json.Encode(Model.CustomerID));
        walkInCustomerID = @Html.Raw(Json.Encode(Model.WalkInCustomerID));
        dataSaved = @Html.Raw(Json.Encode(Model.DataSaved));
        fromInvoice = @Html.Raw(Json.Encode(Model.FromInvoice));

        initData();

        $("#addCustomerDialog").ejDialog({
            width: 500,
            height: "auto",
            showOnInit: false,
            enableModal: true,
            animation: {
                //animation settings while opening the dialog
                show: {
                    effect: "slide",
                    duration: 500
                },
                //animation settings while closing the dialog
                hide: {
                    effect: "slide",
                    duration: 500
                }
            },
            title: "Create Customer",
            enableResize: false,
            allowKeyboardNavigation: false,
            close: "clearFields"
        });

    });

    function initData() {
        viewLoading = true;
        useAppointment = false;

        if (appointmentID != null && appointmentID != "") {
            //debugger;
            useAppointment = true;
            blankAppointmentDD = false;
            updateAppointmentByAppointmentID(appointmentID);
            customerID = updateCustomerByAppointmentID(appointmentID);
            staffID = updateStaffByAppointmentID(appointmentID);
        }
        else {
            updateCustomerByCustomerID(walkInCustomerID);
        }

        if (staffID != null && staffID != "") {
            updateStaffByStaffID(staffID);
        }

        refreshControls();
        refreshSummaryTotals();

        blankAppointmentDD = true;
        viewLoading = false;
    }

    //$(function () {
    //    $("form").submit(function () {
    //        debugger;
    //        var valid = true;
    //        //validation logic here , change valid to false if fail
    //        var gridObj = $("#gridServiceProduct").ejGrid("instance");
    //        $("#returnList").val(JSON.stringify(gridObj.model.dataSource));
    //        var jlst = $.toJSON(gridObj.model.dataSource);

    //        document.getElementById("returnList").innerHTML = JSON.stringify(gridObj.model.dataSource);
    //        document.getElementById("sPModelCol").innerHTML = JSON.stringify(gridObj.model.dataSource);

    //        //serviceProductList.forEach(function (data) {
    //        //    SPList = data;
    //        //});

    //        if (!valid) return false;
    //    });
    //});

    function newData() {
        //debugger;
        var currentViewLoading = viewLoading;
        viewLoading = true;
        dataSaved = false;
        useAppointment = false;
        var selectedStaffVal = $('#selectStaff').val();
        $("#selectAppointment").ejDropDownList("selectItemByValue", "");
        if (walkInCustomerID == null || walkInCustomerID == "") {
            $("#selectCustomer").ejDropDownList("selectItemByValue", "");
        }
        else {
            $("#selectCustomer").ejDropDownList("selectItemByValue", walkInCustomerID);
        }
        $("#selectStaff").ejDropDownList("selectItemByValue", "");
        $("#selectService").ejDropDownList("disable");
        $("#selectProduct").ejDropDownList("disable");
        resetServiceData();
        resetProductData();
        resetItemData();
        refreshControls();
        refreshSummaryTotals();
        selectedStaffVal = $('#selectStaff').val();
        viewLoading = currentViewLoading;
    }

    function cancelChanges() {
        //debugger;
        var PostIt = false;
        var tController = $("#TargetController").val();
        var tName = $("#TargetController").val();
        var tAction = $("#TargetAction").val();
        var url = "/" + tController + "/" + tAction;

        if (PostIt) {
            $.post("/POS/Cancel/", { cancel: true },
                function (data, textStatus) {
                    if (textStatus != "success") {
                        result = "false";
                    }

                    alert("Cancel: '" + textStatus);
                });
        }
        else {
            //location.href = '@Url.Action("Index","Home")';
            //location.href = "/Home/Index";
            location.href = url;
        }
    }

    function saveData(args) {
        debugger;
        var gridObj = $("#gridServiceProduct").ejGrid("instance");
        var serviceProductCol = JSON.stringify(gridObj.model.dataSource);
        var selectedAppointmentVal = $('#selectAppointment').val();
        var selectedCustomerVal = $('#selectCustomer').val();
        var selectedStaffVal = $('#selectStaff').val();
        var discountPercentVal = $("#totalDiscountPercentage").ejNumericTextbox("option", "value");
        var taxPercentVal = taxPercentage;
        var amountVal = $("#totalAmount").ejNumericTextbox("option", "value");
        var totalVal = $("#grandTotal").ejNumericTextbox("option", "value");
        var tipAmountVal = $("#tipAmount").ejNumericTextbox("option", "value");
        var errorMessage = null;
        var saveStatus = "";

        $.post("/POS/Save/", { jsonData: serviceProductCol, paymentType: args, appointmentID: selectedAppointmentVal, customerID: selectedCustomerVal, staffID: selectedStaffVal, discountPercent: discountPercentVal, taxPercent: taxPercentVal, amount: amountVal, total: totalVal, tipAmount: tipAmountVal },
            function (response, textStatus) {
                debugger;
                errorMessage = response[2]; //if (textStatus == "success") {
                if (errorMessage == null) {
                    saveStatus = "success";
                    dataSaved = true;
                    result = "true";
                    transactionID = response[0];
                    appointmentList = response[1];
                    reLoadAppointmentData(appointmentList)
                }
                else {
                    result = "false";
                    transactionID = "";
                    saveStatus = errorMessage;
                }

                //alert("Payment: '" + textStatus + "' Type: '" + args + "'");
                alert("Payment: '" + saveStatus + "' Type: '" + args + "'");

                refreshControls();
            });
    }

    function getCustomerByAppointmentID(appointmentID) {
        var ReturnValue = null;
        var result = $.grep(appointmentList, function (e) { return e.AppointmentID == appointmentID; });

        if (result.length > 0) {
            ReturnValue = result[0].CustomerID;
        }

        return ReturnValue;
    }

    function getStaffByAppointmentID(appointmentID) {
        var ReturnValue = null;
        var result = $.grep(appointmentList, function (e) { return e.AppointmentID == appointmentID; });

        if (result.length > 0) {
            ReturnValue = result[0].StaffID;
        }

        return ReturnValue;
    }

    function getServicePrice(serviceID) {
        var ReturnValue = 0;
        var result = $.grep(serviceList, function (e) { return e.ServiceID == serviceID; });

        if (result.length > 0) {
            ReturnValue = result[0].Price;
        }

        return ReturnValue;
    }

    function getProductPrice(productID) {
        var ReturnValue = 0;
        var result = $.grep(productList, function (e) { return e.ProductID == productID; });

        if (result.length > 0) {
            ReturnValue = result[0].Price;
        }

        return ReturnValue;
    }

    function reLoadAppointmentData(args) {
        //debugger;
        var blanklist = {};
        //var ddObj = $('#selectAppointment').data("ejDropDownList");

        $("#selectAppointment").ejDropDownList({ dataSource: blanklist });
        $("#selectAppointment").ejDropDownList({ dataSource: args});

        //args.forEach(function (data) {
        //    ddObj.model.dataSource.push(data);
        //});
    }

    function reLoadServiceProductData(args) {
        var gridObj = $("#gridServiceProduct").ejGrid("instance");

        args.forEach(function (data) {
            gridObj.model.dataSource.push(data);
            gridObj.refreshContent();
        });
    }

    function updateAppointmentByAppointmentID(appointmentID) {
        var target = $('#selectAppointment').data("ejDropDownList");
        target.selectItemByValue(appointmentID);
    }

    function updateCustomerByAppointmentID(appointmentID) {
        var customerID = getCustomerByAppointmentID(appointmentID);
        updateCustomerByCustomerID(customerID);

        return customerID
    }

    function updateCustomerByCustomerID(customerID) {
        var target = $("#selectCustomer").data("ejDropDownList");
        target.selectItemByValue(customerID);
    }

    function updateStaffByAppointmentID(appointmentID) {
        var staffID = getStaffByAppointmentID(appointmentID);
        updateStaffByStaffID(staffID);

        return staffID;
    }

    function updateStaffByStaffID(staffID) {
        var target = $('#selectStaff').data("ejDropDownList");
        target.selectItemByValue(staffID);
    }

    function create(args) {
        //debugger;
        //var gridObj = $("#gridServiceProduct").ejGrid("instance");
        //var scrollerwidth = $("#container").width();//Obtain the width of the container
        //var scrollerheight = ($("#container").height()) - ($(".e-gridheader").outerHeight()) - ($(".e-pager").outerHeight());//Obtain the height of the container and subtract it from gridheader and pager
        //gridObj.option({ allowScrolling: true, scrollSettings: { width: scrollerwidth, height: scrollerheight } });//pass the obtainer width and height to gridmodel options

        //var gridObj = $("#gridServiceProduct").ejGrid("instance");

        //if (gridObj.model != null && gridObj.model.dataSource != null) {
        //    var rowCount = gridObj.model.dataSource.length;

        //    if (firstTime && rowCount > 0) {
        //        firstTime = false;
        //        refreshSummaryTotals();
        //    }
        //}

        this.element.find(".e-gridcontent").on("click", "a", function (e) {
            //debugger;
            e.preventDefault();
            deleteSelectedGridRows();
        });

    }

    function actionBegin(args) {
        //debugger;
        if ((args.requestType == "delete" || args.requestType == "beginedit") && args.type == "actionBegin") {
            if (dataSaved) {
                args.cancel = true;
            }
        }

    }
    function actionComplete(args) {
        //debugger;

        if (args.requestType == "save" && args.type == "actionComplete") {
            //debugger;
            var gridObj = $("#gridServiceProduct").ejGrid("instance");
            var Total = recalTotal(parseFloat(args.data.Price), parseInt(args.data.Quantity), parseFloat(args.data.DiscountPercentage));
            args.data.Total = Total;
            gridObj.setCellText(args.selectedRow, "Total", Total);
            gridObj.refreshContent();
            refreshSummaryTotals();
            refreshControls();
        }

        if (args.requestType == "delete" && args.type == "actionComplete") {
            //debugger;
            refreshSummaryTotals();
            refreshControls();
        }
    }

    //function queryCellInfo(args) {
    //    if (args.column.field == "Total") {
    //        //debugger;
    //        var TotalAmount = recalTotal(args.data["Price"], args.data["Quantity"], args.data["DiscountPercentage"]); //set the datasource value
    //        //args.data["Total"] = TotalAmount.toFixed(2);
    //        args.data["Total"] = formatter.format(TotalAmount);
    //        $(args.cell).html(args.data["Total"]);  //set the element values

    //        //var newvalue = 0 //args.value;// getting the new value
    //        //var oldvalue = 0; //args.rowData.Total;// getting the old value
    //        //var extra = newvalue - oldvalue;//getting the difference in value

    //        //for (var i = 0; i < this.model.summaryRows.length; i++)
    //        //    for (var j = 0; j < this.model.summaryRows[i].summaryColumns.length; j++) {
    //        //        if (this.model.summaryRows[i].summaryColumns[j].dataMember == "Total" && this.model.summaryRows[i].summaryColumns[j].summaryType == "sum") {
    //        //            j = i;// finding the summaryRow to be modified
    //        //            break;
    //        //        }
    //        //    }

    //        //var summary = ($(".e-gridSummaryRows:eq(" + j + ")").find("td.e-summaryrow")[args.cell.index()].innerHTML).replace(/[$,]/g, "")// getting the summaryValue of the corresponding summaryRow
    //        //var summaryval = (parseFloat(summary) + extra).toFixed(2);

    //        //summaryval = addCommas(summaryval);//add commas to the obtained value
    //        //$(".e-gridSummaryRows:eq(" + j + ")").find("td.e-summaryrow")[args.cell.index()].innerHTML = "$" + summaryval;//assigning the innerHTML of the summaryrow with updated value

    //    }
    //}

    function refreshSummaryTotals() {
        var ReturnValue = 0;
        var Price = 0;
        var Quantity = 0;
        var DiscountPercentage = 0;
        var Total = 0;
        var TipAmount = 0;
        totalAmount = 0;
        taxAmount = 0;
        grandTotal = 0;

        var gridObj = $("#gridServiceProduct").ejGrid("instance");

        if (gridObj.model != null && gridObj.model.dataSource != null) {
            var rowCount = gridObj.model.dataSource.length;

            if (rowCount > 0) {
                for (var row = 0; row < rowCount; row++) {
                    var rowEnt = gridObj.model.dataSource[row];
                    Price = rowEnt["Price"];
                    Quantity = rowEnt["Quantity"];
                    DiscountPercentage = rowEnt["DiscountPercentage"];
                    Total = recalTotal(Price, Quantity, DiscountPercentage)
                    ReturnValue += Total;
                }
            }
        }

        totalDiscountPercentage = $("#totalDiscountPercentage").ejNumericTextbox("option", "value");
        TipAmount = $("#tipAmount").ejNumericTextbox("option", "value");

        totalAmount = ReturnValue;
        totalDiscountAmount = roundTo((totalDiscountPercentage / 100) * totalAmount, decimalPlaces);
        taxAmount = roundTo((taxPercentage / 100) * (totalAmount - totalDiscountAmount), decimalPlaces);
        grandTotal = roundTo((totalAmount - totalDiscountAmount) + taxAmount + TipAmount, decimalPlaces);

        $('#totalAmount').ejNumericTextbox({ value: totalAmount });
        $('#taxAmount').ejNumericTextbox({ value: taxAmount });
        $('#grandTotal').ejNumericTextbox({ value: grandTotal });

        return ReturnValue;
    }

    function refreshControls() {
        //debugger;
        var selectedCustomerVal = $('#selectCustomer').val();
        var selectedServiceVal = $('#selectService').val();
        var selectedProductVal = $('#selectProduct').val();
        var selectedStaffVal = $('#selectStaff').val();
        var gridObj = $("#gridServiceProduct").ejGrid("instance");
        var rowCount = gridObj.model.dataSource.length;

        $("#cancelButton").attr('disabled', false);

        if (dataSaved) {
            $("#selectAppointment").ejDropDownList("disable");
            $("#selectCustomer").ejDropDownList("disable");
            $("#selectStaff").ejDropDownList("disable");
            $("#selectService").ejDropDownList("disable");
            $("#selectProduct").ejDropDownList("disable");
            $("#totalDiscountPercentage").ejNumericTextbox("disable");
            $("#tipAmount").ejNumericTextbox("disable");
            $("#serviceButton").attr('disabled', true);
            $("#productButton").attr('disabled', true);
            $("#newButton").attr('disabled', false);
            $("#printButton").attr('disabled', false);
            $("#checkoutButton").attr('disabled', true);
            $("#btnAddCustomer").attr('disabled', true);
        }
        else {
            $("#totalDiscountPercentage").ejNumericTextbox("enable");
            $("#tipAmount").ejNumericTextbox("enable");
            $("#newButton").attr('disabled', true);
            $("#printButton").attr('disabled', true);
            $("#checkoutButton").attr('disabled', false);
            if (useAppointment) {
                $("#selectAppointment").ejDropDownList("disable");
                $("#selectCustomer").ejDropDownList("disable");
                $("#selectStaff").ejDropDownList("disable");
                $("#btnAddCustomer").attr('disabled', true);
            }
            else {
                if (appointmentList.length > 0) {
                    $("#selectAppointment").ejDropDownList("enable");
                }
                else {
                    $("#selectAppointment").ejDropDownList("disable");
                }
                $("#selectCustomer").ejDropDownList("enable");
                $("#selectStaff").ejDropDownList("enable");
                $("#btnAddCustomer").attr('disabled', false);
            }
            if (selectedCustomerVal == null || selectedCustomerVal == "") {
                if (!viewLoading) {
                    resetAllData();
                }
            }
            else {
                $("#selectService").ejDropDownList("enable");
                $("#selectProduct").ejDropDownList("enable");
                if (selectedServiceVal == null || selectedServiceVal == "") {
                    $("#serviceButton").attr('disabled', true);
                }
                else {
                    $("#serviceButton").attr('disabled', false);
                }

                if (selectedProductVal == null || selectedProductVal == "") {
                    $("#productButton").attr('disabled', true);
                }
                else {
                    $("#productButton").attr('disabled', false);
                }
            }
        }

        if (rowCount < 1) {
            $("#printButton").attr('disabled', true);
            $("#checkoutButton").attr('disabled', true);
        }

        if (fromInvoice) {
            $("#selectService").ejDropDownList("disable");
            $("#selectProduct").ejDropDownList("disable");
            $("#serviceButton").attr('disabled', true);
            $("#productButton").attr('disabled', true);
            $("#newButton").attr('disabled', true);
            $("#printButton").attr('disabled', false);
            $("#checkoutButton").attr('disabled', true);
            $("#btnAddCustomer").attr('disabled', true);
        }
    }

    var formatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD',
        minimumFractionDigits: 2,
    });


    function roundTo(n, digits) {
        if (digits === undefined) {
            digits = 0;
        }

        var multiplicator = Math.pow(10, digits);
        n = parseFloat((n * multiplicator).toFixed(11));
        var test = (Math.round(n) / multiplicator);
        return +(test.toFixed(2));
    }

    function RefreshTotal(price, quantity, discountpercentage) {
        var ReturnValue = "";
        var Result = recalTotal(price, quantity, discountpercentage);

        ReturnValue = formatter.format(Result);

        return ReturnValue;
    }

    function recalTotal(price, quantity, discountpercentage) {
        var ReturnValue = 0;
        var DiscountAmount = 0;
        var Amount = 0;
        try
        {
            Amount = price * quantity;
            DiscountAmount = roundTo((discountpercentage / 100) * Amount, decimalPlaces);
            //DiscountAmount = Math.round((discountpercentage / 100) * Amount);
            ReturnValue = roundTo(Amount - DiscountAmount, decimalPlaces);
        }
        catch (Exception)
        {
            ReturnValue = 0;
        }

        return ReturnValue;
    }

    function resetAllData() {
        $("#selectService").ejDropDownList("disable");
        $("#selectProduct").ejDropDownList("disable");
        resetStaffData();
        resetServiceData();
        resetProductData();
        resetItemData();
        refreshSummaryTotals();
    }

    function resetStaffData() {
        $("#selectStaff").ejDropDownList("selectItemByValue", "");
        //$("#staffButton").attr('disabled', true);

    }

    function resetServiceData() {
        $("#selectService").ejDropDownList("selectItemByValue", "");
        $("#serviceButton").attr('disabled', true);

    }

    function resetProductData() {
        $("#selectProduct").ejDropDownList("selectItemByValue", "");
        $("#productButton").attr('disabled', true);
    }

    function resetItemData() {
        var gridObj = $("#gridServiceProduct").ejGrid("instance");
        var rowCount = gridObj.model.dataSource.length;

        if (rowCount > 0) {
            gridObj.selectRows(0, rowCount - 1);
            deleteSelectedGridRows();
        }

    }

    function deleteSelectedGridRows() {
        //debugger;
        if (!dataSaved) {
            var gridObj = $("#gridServiceProduct").ejGrid("instance");
            var selrecs = gridObj.getSelectedRecords()
            var rowCount = selrecs.length;

            if (rowCount > 0) {
                for (var row = 0; row < rowCount; row++) {
                    var rowtodel = selrecs[row];
                    gridObj.deleteRecord("ID", rowtodel);
                }
            }

            gridObj.refreshContent();
            refreshSummaryTotals();
            refreshControls();
        }
    }

    function editSelectedGridRow() {
        var gridObj = $("#gridServiceProduct").ejGrid("instance");
        var selrecs = gridObj.getSelectedRecords()
        var rowCount = selrecs.length;

        if (rowCount > 0) {
            var rowtoedit = selrecs[0];
            //gridObj.startEdit(rowtoedit);
            gridObj.startEdit($(".gridcontent tr").first());
        }

        //gridObj.refreshContent();
    }

    function printData() {
        //debugger;
        if (transactionID == "") {
            alert("Cannot print current POS entry as no ID found.");
        }
        else {
            var actionUrl = '@Url.Action("POSReport", "Report", new { reportName = "POSReport"  , transactionID = "IDPLACEHOLDER" } )';
            actionUrl = actionUrl.replace('IDPLACEHOLDER', transactionID);
            window.open(actionUrl);
        }
    }

    function onaddserviceclick() {
        var target = $('#selectService').data("ejDropDownList");
        selectedServiceValue = target.option("value");
        //debugger;
        if (selectedServiceValue != null && selectedServiceValue != "") {
            var price = getServicePrice(selectedServiceValue);
            var quantity = 1;
            var discountpercentage = 0;
            var total = recalTotal(price, quantity, discountpercentage)
            var data = { ID: selectedServiceValue, Name: selectedServiceText, Price: price, Quantity: quantity, DiscountPercentage: discountpercentage, Total: total, IsService: true }
            var gridObj = $("#gridServiceProduct").ejGrid("instance");

            gridObj.model.dataSource.push(data);
            gridObj.refreshContent();

            resetServiceData();
            refreshSummaryTotals();
            refreshControls();
        }
    }

    function onaddproductclick() {
        var target = $('#selectProduct').data("ejDropDownList");
        selectedProductValue = target.option("value");
        //debugger;
        if (selectedProductValue != null && selectedProductValue != "") {
            var price = getProductPrice(selectedProductValue);
            var quantity = 1;
            var discountpercentage = 0;
            var total = recalTotal(price, quantity, discountpercentage)
            var data = { ID: selectedProductValue, Name: selectedProductText, Price: price, Quantity: quantity, DiscountPercentage: discountpercentage, Total: total, IsService: false }
            var gridObj = $("#gridServiceProduct").ejGrid("instance");

            gridObj.model.dataSource.push(data);
            gridObj.refreshContent();

            resetProductData();
            refreshSummaryTotals()
            refreshControls();
        }
    }

    function onAppointmentActiveValueChange(args) {
        var target = $('#selectAppointment').data("ejDropDownList");
        var oValue = target.option("value");
        target.selectItemByValue(args.selectedValue);
        selectedAppointmentValue = target._itemID;

        if (!viewLoading) {
            if (selectedAppointmentValue != null || selectedAppointmentValue != "") {
                //debugger;
                getServicesByAppointment(selectedAppointmentValue);
                blankAppointmentDD = false;

                if (args.selectedValue == appointmentID) {
                    /*debugger*/;
                    reLoadServiceProductData(serviceProductList);
                }
                updateCustomerByAppointmentID(selectedAppointmentValue);
                blankAppointmentDD = true;
            }
            else {
                resetAllData();
                refreshControls();
            }
        }

    }

    function onCustomerActiveValueChange(args) {
        var target = $('#selectCustomer').data("ejDropDownList");
        target.selectItemByValue(args.selectedValue);
        selectedCustomerValue = target._itemID;

        if (!viewLoading) {
            resetAllData();
            refreshControls();

            target = $('#selectAppointment').data("ejDropDownList");
            var oValue = target.option("value");

            if (blankAppointmentDD) {
                selectedAppointmentValue = null;
                target = $('#selectAppointment').data("ejDropDownList");
                target.selectItemByValue(selectedAppointmentValue);
            }
        }
    }

    function onStaffActiveValueChange(args) {
        //debugger;
        var target = $('#selectStaff').data("ejDropDownList");
        target.selectItemByValue(args.selectedValue);
        selectedStaffValue = target._itemID;
        selectedStaffText = target.selectedTextValue;

        if (!viewLoading) {
            refreshControls();
        }
    }

    function onServiceActiveValueChange(args) {
        //debugger;
        var target = $('#selectService').data("ejDropDownList");
        //target.selectItemByValue(args.selectedValue);
        target.selectItemByValue(args.value);
        selectedServiceValue = target._itemID;
        selectedServiceText = target.selectedTextValue;

        if (!viewLoading) {
            if (addOnDropdownChange) {
                onaddserviceclick();
            }
            refreshControls();
        }
    }

    function onProductActiveValueChange(args) {
        var target = $('#selectProduct').data("ejDropDownList");
        //target.selectItemByValue(args.selectedValue);
        target.selectItemByValue(args.value);
        selectedProductValue = target._itemID;
        selectedProductText = target.selectedTextValue;

        if (!viewLoading) {
            if (addOnDropdownChange) {
                onaddproductclick();
            }
            refreshControls();
        }
    }

    function onPaymentTypeActiveValueChange(args) {
        var target = $('#selectPaymentType').data("ejDropDownList");
        debugger;
        //target.selectItemByValue(args.selectedValue);
        target.selectItemByValue(args.value);
        selectedPaymentTypeValue = target._itemID;
        selectedPaymentTypeText = target.selectedTextValue;

        saveData("selectedPaymentTypeText");
    }

    function onTotalDiscountPercentageChange() {
        refreshSummaryTotals();
    }

    function onTipAmountChange() {
        refreshSummaryTotals();
    }

    function onprintclick() {
        printData();
    }

    function ondeleteclick() {
        //debugger;
        deleteSelectedGridRows();
    }

    function oneditclick() {
        //debugger;
        editSelectedGridRow();
    }

    function onsaveclick() {
        //location.href = '@Url.Action("Save","POS")';
        saveData("");
    }

    function onsavecashclick() {
        saveData("Cash");
    }

    function onsavedebitcardclick() {
        saveData("DebitCard");
    }

    function onsavevisaclick() {
        saveData("Visa");
    }

    function onsavemastercardclick() {
        saveData("MasterCard");
    }

    function onsaveotherclick() {
        debugger;
        saveData("MasterCard");
    }

    function oncancelclick() {
        cancelChanges();
    }

    function onnewclick() {
        newData();
    }

    function onPTSelected(args) {
        debugger;
        saveData("MasterCard");
    }

    function onPTClick(args) {
        //debugger;
        args.cancel = true;
    }

    function getServicesByAppointment(selectedAppointmentValue) {
        var ReturnValue = "";
        //debugger;
        $.ajax({
            type: "POST",
            url: "/POS/GetServicesByAppointmentID",
            data: '{appointmentID: "' + selectedAppointmentValue + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                //alert("Success: " + response);
                //debugger;
                //var arr = Object.keys(response).map(function (k) { return obj[k] });
                //var arr = Object.values(response);
                //var parsed = JSON.parse(response);
                //var arr = [];

                //for (var x in parsed) {
                //    arr.push(parsed[x]);
                //}

                var cusID = response[0];
                var staCID = response[1];

                //appointmentID = selectedAppointmentValue;
                //customerID = response[0];
                //staffID = response[1];

                reLoadServiceProductData(response[2]);

                updateAppointmentByAppointmentID(selectedAppointmentValue);
                updateCustomerByAppointmentID(selectedAppointmentValue);
                updateStaffByStaffID(staCID);
                refreshControls();
                refreshSummaryTotals();

            },
            failure: function (response) {
                alert("Failure: " + response.responseText);
            },
            error: function (response) {
                alert("Error: " + response.responseText);
            }
        });

        return ReturnValue;
    }

    function addCustomer() {
        refreshAddCustomerControls();
        $("#addCustomerDialog").ejDialog("open");
    }

    function clearFields() {
        resetCustomerFields();
    }

    function resetCustomerFields() {
        $("#customerName").val("");
        $("#customerPhone").val("");
        $("#customerEmail").val("");
    }

    function reLoadcustomerData(args) {
        //debugger;
        var blanklist = null; //{};

        $("#selectCustomer").ejDropDownList({ dataSource: blanklist });
        $("#selectCustomer").ejDropDownList({ dataSource: args });

    }

    function refreshAddCustomerControls() {
        //debugger;
        var value = document.getElementById('customerName').value

        if (value == null || value == "") {
            document.getElementById("btnSaveCustomer").setAttribute("disabled", "disabled");
        }
        else {
            document.getElementById("btnSaveCustomer").removeAttribute("disabled");
        }
    }

    function cancelCustomer() {
        $("#addCustomerDialog").ejDialog("close");
        clearFields();
    }

    function saveCustomer() {
        $("#addCustomerDialog").ejDialog("close");
        // Code to add new Customer

        var customerNameValue = document.getElementById('customerName').value;
        var customerPhoneValue = document.getElementById('customerPhone').value;
        var customerEmailValue = document.getElementById('customerEmail').value;

        $.ajax({
            type: "POST",
            url: "/POS/AddCustomer",
            data: '{customerName: "' + customerNameValue + '", customerPhone: "' + customerPhoneValue + '", customerEmail: "' + customerEmailValue + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (response) {
                //alert("Success: " + response);
                //debugger;

                reLoadcustomerData(response[1]);

                var target = $('#selectCustomer').data("ejDropDownList");
                target.selectItemByValue(response[0]);

                resetCustomerFields();

            },
            failure: function (response) {
                alert("Failure: " + response.responseText);
            },
            error: function (response) {
                alert("Error: " + response.responseText);
            }
        });

        clearFields();
    }

</script>
